name: Build mbedtls

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      create-pullrequest:
        description: true to craete PR for artifacts.
        required: true
        type: boolean
        default: false
  push:
    branches: [main]
    paths-ignore:
      - "*.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "*.md"

# OUTPUT_DIR name follow to .NET RID rule. https://docs.microsoft.com/ja-jp/dotnet/core/rid-catalog
# android-x64, ios-arm64, linux-x64, osx-x64, win-x64

env:
  app: mbedtls

jobs:
  android:
    strategy:
      fail-fast: false
      matrix:
        target: ["x86", "x64", "arm", "arm64"]
        patch: ["", "-patch"]
        symbol-convert: ["", "symbol"]
    env:
      OUTPUT_DIR: _out/android-${{ matrix.target }}${{ matrix.patch }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - name: Patch wrapper class
        run: if [[ -f ../builder/mbedtls/wrapper.patch ]]; then patch -p1 < ../builder/mbedtls/wrapper.patch; fi
        working-directory: ${{ env.app }}
        if: ${{ matrix.patch != '' }}
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"
      - name: SymbolConverter
        run: |
          dotnet run --project ./tools/SymbolConverter/src/SymbolConverter/SymbolConverter.csproj prefix --prefix nantoka_ --header-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/include,${{ github.workspace }}/mbedtls/tests/include,${{ github.workspace }}/mbedtls/programs --impl-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/tests,${{ github.workspace }}/mbedtls/programs --macro-paths ${{ github.workspace }}/mbedtls/library --impl-extensions *.c,*.function,*.data --method-delimiters : --dryrun false
        env:
          SYMBOL_CONVERTER_MACRO_REGEXES: ".*(?<name>mbedtls_##type##_context).*,.*(?<name>mbedtls_##type##_init).*"
        if: ${{ matrix.symbol-convert == 'symbol' }}
      - name: Build
        run: bash ./builder/${{ env.app }}/${{ env.app }}-android-${{ matrix.target }}.sh
      - name: show generated files
        run: git ls-files --other --modified --exclude-standard
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: _out
        if: ${{ inputs.create-pullrequest == true }}

  ios:
    strategy:
      fail-fast: false
      matrix:
        target: ["arm64"]
        patch: ["", "-patch"]
        symbol-convert: ["", "symbol"]
    env:
      OUTPUT_DIR: _out/ios-${{ matrix.target }}${{ matrix.patch }}
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - name: Patch wrapper class
        run: if [[ -f ../builder/mbedtls/wrapper.patch ]]; then patch -p1 < ../builder/mbedtls/wrapper.patch; fi
        working-directory: ${{ env.app }}
        if: ${{ matrix.patch != '' }}
      - name: SymbolConverter
        run: |
          dotnet run --project ./tools/SymbolConverter/src/SymbolConverter/SymbolConverter.csproj prefix --prefix nantoka_ --header-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/include,${{ github.workspace }}/mbedtls/tests/include,${{ github.workspace }}/mbedtls/programs --impl-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/tests,${{ github.workspace }}/mbedtls/programs --macro-paths ${{ github.workspace }}/mbedtls/library --impl-extensions *.c,*.function,*.data --method-delimiters : --dryrun false
        env:
          SYMBOL_CONVERTER_MACRO_REGEXES: ".*(?<name>mbedtls_##type##_context).*,.*(?<name>mbedtls_##type##_init).*"
        if: ${{ matrix.symbol-convert == 'symbol' }}
      - name: Build
        run: bash ./builder/${{ env.app }}/${{ env.app }}-ios-arm64.sh
      - name: show generated files
        run: git ls-files --other --modified --exclude-standard
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: _out
        if: ${{ inputs.create-pullrequest == true }}

  linux:
    strategy:
      fail-fast: false
      matrix:
        target: ["x64", "arm64"]
        patch: ["", "-patch"]
        symbol-convert: ["", "symbol"]
    env:
      OUTPUT_DIR: _out/linux-${{ matrix.target }}${{ matrix.patch }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - name: Patch wrapper class
        run: if [[ -f ../builder/mbedtls/wrapper.patch ]]; then patch -p1 < ../builder/mbedtls/wrapper.patch; fi
        working-directory: ${{ env.app }}
        if: ${{ matrix.patch != '' }}
      - name: SymbolConverter
        run: |
          dotnet run --project ./tools/SymbolConverter/src/SymbolConverter/SymbolConverter.csproj prefix --prefix nantoka_ --header-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/include,${{ github.workspace }}/mbedtls/tests/include,${{ github.workspace }}/mbedtls/programs --impl-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/tests,${{ github.workspace }}/mbedtls/programs --macro-paths ${{ github.workspace }}/mbedtls/library --impl-extensions *.c,*.function,*.data --method-delimiters : --dryrun false
        env:
          SYMBOL_CONVERTER_MACRO_REGEXES: ".*(?<name>mbedtls_##type##_context).*,.*(?<name>mbedtls_##type##_init).*"
        if: ${{ matrix.symbol-convert == 'symbol' }}
      - name: Build
        run: bash ./builder/${{ env.app }}/${{ env.app }}-linux-${{ matrix.target }}.sh
      - name: show generated files
        run: git ls-files --other --modified --exclude-standard
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: _out
        if: ${{ inputs.create-pullrequest == true }}

  macos:
    strategy:
      fail-fast: false
      matrix:
        target: ["x64", "arm64"]
        patch: ["", "-patch"]
        symbol-convert: ["", "symbol"]
    env:
      OUTPUT_DIR: _out/osx-${{ matrix.target }}${{ matrix.patch }}
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - name: Patch wrapper class
        run: if [[ -f ../builder/mbedtls/wrapper.patch ]]; then patch -p1 < ../builder/mbedtls/wrapper.patch; fi
        working-directory: ${{ env.app }}
        if: ${{ matrix.patch != '' }}
      - name: SymbolConverter
        run: |
          dotnet run --project ./tools/SymbolConverter/src/SymbolConverter/SymbolConverter.csproj prefix --prefix nantoka_ --header-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/include,${{ github.workspace }}/mbedtls/tests/include,${{ github.workspace }}/mbedtls/programs --impl-paths ${{ github.workspace }}/mbedtls/library,${{ github.workspace }}/mbedtls/tests,${{ github.workspace }}/mbedtls/programs --macro-paths ${{ github.workspace }}/mbedtls/library --impl-extensions *.c,*.function,*.data --method-delimiters : --dryrun false
        env:
          SYMBOL_CONVERTER_MACRO_REGEXES: ".*(?<name>mbedtls_##type##_context).*,.*(?<name>mbedtls_##type##_init).*"
        if: ${{ matrix.symbol-convert == 'symbol' }}
      - name: Build
        run: bash ./builder/${{ env.app }}/${{ env.app }}-darwin-${{ matrix.target }}.sh
      - name: show generated files
        run: git ls-files --other --modified --exclude-standard
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: _out
        if: ${{ inputs.create-pullrequest == true }}

  windows:
    strategy:
      fail-fast: false
      matrix:
        target: ["x64", "x86", "arm64"]
        patch: ["", "-patch"]
        symbol-convert: ["", "symbol"]
    env:
      OUTPUT_DIR: _out\win-${{ matrix.target }}${{ matrix.patch }}
    runs-on: windows-2022
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - name: Patch wrapper class
        run: IF EXIST "..\builder\mbedtls\patch\wrapper.patch" git apply --ignore-space-change --ignore-whitespace --whitespace=nowarn ..\builder\mbedtls\patch\wrapper.patch
        working-directory: ${{ env.app }}
        shell: cmd
        if: ${{ matrix.patch != '' }}
      - name: Patch Windows shared symbol output
        run: IF EXIST "..\builder\mbedtls\patch\windows.patch" git apply --ignore-space-change --ignore-whitespace --whitespace=nowarn ..\builder\mbedtls\patch\windows.patch
        working-directory: ${{ env.app }}
        shell: cmd
        if: ${{ matrix.patch != '' }}
      - run: echo "WORKSPACE=$(`"${{ github.workspace }}`".Replace('\','/'))" >> "$env:GITHUB_ENV"
        id: workspace
      - name: SymbolConverter
        run: |
          dotnet run --project ./tools/SymbolConverter/src/SymbolConverter/SymbolConverter.csproj prefix --prefix nantoka_ --header-paths ${{ env.workspace }}/mbedtls/library,${{ env.workspace }}/mbedtls/include,${{ env.workspace }}/mbedtls/tests/include,${{ env.workspace }}/mbedtls/programs --impl-paths ${{ env.workspace }}/mbedtls/library,${{ env.workspace }}/mbedtls/tests,${{ env.workspace }}/mbedtls/programs --macro-paths ${{ env.workspace }}/mbedtls/library --impl-extensions *.c,*.function,*.data --method-delimiters : --dryrun false
        env:
          SYMBOL_CONVERTER_MACRO_REGEXES: ".*(?<name>mbedtls_##type##_context).*,.*(?<name>mbedtls_##type##_init).*"
        if: ${{ matrix.symbol-convert == 'symbol' }}
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Build
        run: builder\${{ env.app }}\${{ env.app }}-windows-${{ matrix.target }}.bat
        shell: cmd
      - name: show generated files
        run: git ls-files --other --modified --exclude-standard
      - uses: actions/upload-artifact@v3
        with:
          name: artifact
          path: _out
        if: ${{ inputs.create-pullrequest == true }}

  pr:
    if: ${{ inputs.create-pullrequest == true }}
    needs: [android, ios, linux, macos, windows]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: git fetch --tags
        working-directory: ${{ env.app }}
      - run: echo "::set-output name=value::$(git tag --points-at HEAD -l -n0 | grep "v" | tr -d '[:space:]')"
        id: version
        working-directory: ${{ env.app }}
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: _tmp
      - name: Copy to artifact
        run: |
          rm -rf ./artifact/${{ env.app }}
          mkdir -p ./artifact/${{ env.app }}
          cp -fR ./_tmp/* ./artifact/${{ env.app }}
      - name: Check for modified files
        id: git-check
        run: echo "::set-output name=modified::$(if [[ "$(git status --porcelain=v1 2>/dev/null | wc -l)" == "0" ]]; then echo "false"; else echo "true"; fi)"
      - if: steps.git-check.outputs.modified == 'true'
        name: Create PullRequest
        uses: peter-evans/create-pull-request@v4
        with:
          base: "main"
          branch: "auto/${{ env.app }}_tmp"
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          delete-branch: true
          title: "[${{ env.app }}] Update artifacts ${{ steps.version.outputs.value }}"
          body: |
            Update ${{ env.app }} artifacts for ${{ steps.version.outputs.value }} 🚀
          labels: |
            automated pr
